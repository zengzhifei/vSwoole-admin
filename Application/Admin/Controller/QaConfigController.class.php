<?php
/**
 * Created by PhpStorm.
 * User: zengz
 * Date: 2018/1/22
 * Time: 9:10
 */

namespace Admin\Controller;


class QaConfigController extends HudongAdminController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->connectRedis();

        $this->assign('menuname', "问答配置");
    }

    public function index()
    {
        //开启中的栏目，期数，分组
        $column = $this->column;
        $stage = $this->stage;
        if ($stage) {
            $group = M('group')->where(array('stage_id' => $stage['stage_id']))->select();
        }

        //app id 验证配置
        $data['CHECK_APP_USER_ID'] = $this->redis->get(get_redis_key('QA.QA_CHECK_APP_USER_ID'));
        //系统偏移量
        $data['QA_PUSH_OFFSET'] = $this->redis->get(get_redis_key('QA.PUSH_OFFSET'));
        //期参与基数
        $data['QA_STAGE_USER_JOIN_BASE'] = $this->redis->hGet(get_redis_key('QA.STAGE_USER_JOIN_BASE'), $stage['stage_id']);
        //服务器地址
        $qa_server = C('QA.QA_SERVER_PATH');
        $data['QA_SERVER_TIME'] = $qa_server['TIME'];
        $data['QA_SERVER_TIME_PATH'] = $this->redis->hGet(get_redis_key('QA.QA_SERVER'), $qa_server['TIME']);
        //短信号码
        $data['QA_SMS_PHONES'] = $this->redis->get(get_redis_key('QA.SMS_PHONES'));
        //开启短信通知
        $data['QA_SMS_NOTICE'] = $this->redis->get(get_redis_key('QA.SMS_NOTICE'));
        //短信剩余条数
        $smsCount = R('Sms/getSmsCount');
        $data['QA_SMS_TOTAL'] = $smsCount['result'] == 0 ? 100 - $smsCount['data']['success'] : $smsCount['msg'];
        //清除系统数据加密方法
        $data['QA_CLEAR_DATA'] = think_encrypt('ctvit', '', 60);

        $this->assign('column', $column);
        $this->assign('stage', $stage);
        $this->assign('group', $group);
        $this->assign('data', $data);
        $this->display();
    }

    /**
     * 系统配置
     */
    public function setConfig()
    {
        $configKey = I('config_key', '');
        $configVal = I('config_val', '');
        if ($configKey === '') {
            $this->ajaxReturn(array('status' => -1, 'msg' => '参数无效：config_key'));
        }

        switch ($configKey) {
            case 'CHECK_APP_USER_ID':
                $this->redis->set(get_redis_key('QA.QA_CHECK_APP_USER_ID'), $configVal);
                $setRes = $this->redis->get(get_redis_key('QA.QA_CHECK_APP_USER_ID')) == $configVal ? true : false;
                break;
            case 'QA_SMS_NOTICE':
                $this->redis->set(get_redis_key('QA.SMS_NOTICE'), $configVal);
                $setRes = $this->redis->get(get_redis_key('QA.SMS_NOTICE')) == $configVal ? true : false;
                break;
        }

        if ($setRes) {
            $this->ajaxReturn(array('status' => 1, 'msg' => '成功'));
        } else {
            $this->ajaxReturn(array('status' => 0, 'msg' => '失败'));
        }
    }

    /**
     * 设置题目推送时间偏移量
     */
    public function setQaPushOffset()
    {
        $offset = I('offset', false);
        $is_auto = I('is_auto', false);
        $start_time = I('start_time', false);
        if ($is_auto) {
            if (!$start_time) {
                $this->ajaxReturn(array('status' => -1, 'info' => '自动设置，节目初始时间不能为空'));
            }
            $now = time();
            $start_time = strtotime($start_time);
            $offset = $start_time - $now;
        }
        if (is_numeric($offset) && is_int($offset / 1)) {
            $res = $this->redis->set(get_redis_key('QA.PUSH_OFFSET'), $offset);
            $this->ajaxReturn(array('status' => 1, 'info' => '设置成功'));
        } else {
            $this->ajaxReturn(array('status' => 0, 'info' => '偏移量只能是整数'));
        }
    }

    /**
     * 设置每期答题人数基数
     */
    public function setStageUserBaseNumber()
    {
        $count = I('count', false);
        $stage_id = I('stage_id', false);
        if ($stage_id && is_numeric($count) && is_int($count / 1)) {
            $res = $this->redis->hSet(get_redis_key('QA.STAGE_USER_JOIN_BASE'), $stage_id, abs($count));
            $this->ajaxReturn(array('status' => 1, 'info' => '设置成功'));
        } else {
            $this->ajaxReturn(array('status' => 0, 'info' => '人数只能是正整数'));
        }
    }

    /**
     * 设置每期答题人数基数
     */
    public function setGroupUserBaseNumber()
    {
        $count = I('count', false);
        $group_id = I("group_id", false);
        if ($group_id && is_numeric($count) && is_int($count / 1)) {
            $result = $this->redis->hSet(get_redis_key('QA.GROUP_USER_JOIN_BASE'), $group_id, abs($count));
            $this->ajaxReturn(array('status' => 1, 'info' => '设置成功'));
        } else {
            $this->ajaxReturn(array('status' => 0, 'info' => '人数只能是正整数'));
        }
    }

    /**
     * 获取每轮答题人数基数
     */
    public function getGroupUserBaseNumber()
    {
        $group_id = I("group_id", false);
        if ($group_id) {
            $data = $this->redis->hGet(get_redis_key('QA.GROUP_USER_JOIN_BASE'), $group_id);
            if ($data) {
                $this->ajaxReturn(array('status' => 1, 'info' => '获取成功', 'data' => $data));
            } else {
                $this->ajaxReturn(array('status' => 0, 'info' => '暂无数据'));
            }
        } else {
            $this->ajaxReturn(array('status' => -1, 'info' => '参数丢失：group_id'));
        }
    }

    /**
     * 答题时间校准
     */
    public function setQaTimeCheck()
    {
        $stage_id = I('stage_id', false);
        $start_time = I('start_time', false);
        $end_time = I('end_time', false);
        if ($stage_id && $start_time && $end_time) {
            $time = strtotime($end_time) - strtotime($start_time);
            $update_data = array(
                'qa_start_time' => array('exp', "`qa_start_time` + {$time}"),
                'qa_end_time'   => array('exp', "`qa_end_time` + {$time}"),
                'qa_res_time'   => array('exp', "`qa_res_time` + {$time}"),
                'qa_updated'    => time()
            );
            $res = M('qa')->where(array('stage_id' => $stage_id))->save($update_data);
            if ($res) {
                $this->ajaxReturn(array('status' => 1, 'info' => '校准成功,请立即重新同步缓存'));
            } else {
                $this->ajaxReturn(array('status' => 0, 'info' => '校准失败'));
            }
        } else {
            $this->ajaxReturn(array('status' => -1, 'info' => '时间校准量只能是整数'));
        }
    }

    /**
     * 设置服务器地址
     */
    public function setQaServerPath()
    {
        $server_type = I("server_type", false);
        $server_path = I("server_path", false);
        if ($server_type && $server_path) {
            $res = $this->redis->hSet(get_redis_key('QA.QA_SERVER'), $server_type, $server_path);
            $this->ajaxReturn(array('status' => 1, 'info' => '设置成功'));
        } else {
            $this->ajaxReturn(array('status' => -1, 'info' => '参数丢失：server_type,server_path'));
        }
    }

    /**
     * 设置服务器地址
     */
    public function setQaSmsPhones()
    {
        $sms_phones = I("sms_phones", false);
        if ($sms_phones) {
            $res = $this->redis->set(get_redis_key('QA.SMS_PHONES'), $sms_phones);
            $this->ajaxReturn(array('status' => 1, 'info' => '设置成功'));
        } else {
            $this->ajaxReturn(array('status' => -1, 'info' => '参数丢失：sms_phones'));
        }
    }

    /**
     * 清除系统数据
     * 数据库 + 缓存
     */
    public function clearCacheData()
    {
        $data = I('data', '', 'string');
        $key = I('key', false);

        if (!$key) {
            $this->ajaxReturn(array('status' => 0, 'info' => '参数丢失：加密密码'));
        }
        $psw = think_decrypt($key, '');
        if (!$psw) {
            $this->ajaxReturn(array('status' => 0, 'info' => '加密密码过期'));
        }
        if ($psw != $data) {
            $this->ajaxReturn(array('status' => 0, 'info' => '验证不通过'));
        }

        $cache_arr = array(
            $this->redis->keys(C('REDIS_INDEX') . '*')
        );
        $this->redis->del(array_reduce($cache_arr, 'array_merge', array()));
        $data_str = 'TRUNCATE TABLE wei_column;';
        $data_str .= 'TRUNCATE TABLE wei_stage;';
        $data_str .= 'TRUNCATE TABLE wei_group;';
        $data_str .= 'TRUNCATE TABLE wei_qa;';
        $data_str .= 'TRUNCATE TABLE wei_qa_group_count;';
        $data_str .= 'TRUNCATE TABLE wei_qa_log;';
        $data_str .= 'TRUNCATE TABLE wei_qa_lucky_prize;';
        $data_str .= 'TRUNCATE TABLE wei_qa_lucky_user;';
        $data_str .= 'TRUNCATE TABLE wei_qa_monitor_process;';
        $data_str .= 'TRUNCATE TABLE wei_qa_option;';
        $res = M()->execute($data_str);
        $this->ajaxReturn(array('status' => 1, 'info' => '清除成功'));
    }

}