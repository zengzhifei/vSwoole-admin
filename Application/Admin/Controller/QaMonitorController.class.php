<?php
/**
 * Created by PhpStorm.
 * User: zengz
 * Date: 2018/1/18
 * Time: 10:34
 */

namespace Admin\Controller;


class QaMonitorController extends HudongAdminController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $process_list = M('qa_monitor_process')->select();
        $this->assign('process_list', $process_list);
        $this->assign('menuname', "进程列表");
        $this->display();
    }

    /**
     * 增加进程
     */
    public function processAdd()
    {
        $project_name = I('project_name', false);
        $project_path = I('project_path', false);
        $process_name = I('process_name', false);
        $process_code = I('process_code', false);
        if (!$project_name || !$project_path || !$process_name || !$process_code) {
            $this->ajaxReturn(array('status' => -1, 'msg' => '参数无效'));
        }

        if (preg_match("/rm\s+-/", $project_path) || preg_match("/rm\s+-/", $process_code)) {
            $this->ajaxReturn(array('status' => -2, 'msg' => "项目路径和进程代码禁止出现：'rm -'"));
        }

        $data = array(
            'project_name' => $project_name,
            'project_path' => $project_path,
            'process_name' => $process_name,
            'process_code' => $process_code,
        );
        $res = M('qa_monitor_process')->add($data);
        if ($res) {
            $this->ajaxReturn(array('status' => 1, 'msg' => "成功"));
        } else {
            $this->ajaxReturn(array('status' => 0, 'msg' => "添加失败"));
        }
    }

    /**
     * 删除进程
     */
    public function processDelete()
    {
        $process_id = I('process_id', false, 'intval');
        if (!$process_id) {
            $this->ajaxReturn(array('status' => -1, 'msg' => "进程ID无效"));
        }

        $res = M('qa_monitor_process')->where(array('id' => $process_id))->delete();
        if ($res) {
            $this->ajaxReturn(array('status' => 1, 'msg' => "成功"));
        } else {
            $this->ajaxReturn(array('status' => 0, 'msg' => "删除成功"));
        }
    }

    /**
     * 启用停用进程
     */
    public function processStartStop()
    {
        $process_id = I('process_id', false, 'intval');
        $process_status = I('process_status', 0, 'intval');
        if (!$process_id) {
            $this->ajaxReturn(array('status' => -1, 'msg' => "进程ID无效"));
        }
        $process_status = $process_status ? 1 : 0;
        $res = M('qa_monitor_process')->where(array('id' => $process_id))->save(array('monitor_status' => $process_status));
        if ($res) {
            $this->ajaxReturn(array('status' => 1, 'msg' => "成功"));
        } else {
            $this->ajaxReturn(array('status' => 0, 'msg' => "失败"));
        }
    }

    /**
     * 进程监控页
     */
    public function processMonitor()
    {
        $this->assign('title', '进程监控列表');
        $this->display();
    }

    /**
     * 获取监控信息
     */
    public function getProcessMonitor()
    {
        $this->connectRedis();
        //服务器地址
        $qa_server = C('QA.QA_SERVER_PATH');
        $qa_server_time_path = $this->redis->hGet(get_redis_key('QA.QA_SERVER'), $qa_server['TIME']);
        if (!$qa_server_time_path) {
            $this->ajaxReturn(array('status' => -1, 'msg' => '没有设置定时服务器地址'));
        }
        $url = $qa_server_time_path . '/api.php?s=Api/QaMonitor/processMonitor';
        $data = http($url, array(), 'GET', array("Content-type: text/html; charset=utf-8"));
        $data = json_decode($data, true);
        if ($data) {
            if ($data['status'] == 1) {
                if (0 === $data['is_unusual']) {
                    if ($this->redis->get(get_redis_key('QA.SMS_NOTICE')) === 'true') {
                        $phones = $this->redis->get(get_redis_key('QA.SMS_PHONES'));
                        $phones = explode(',', $phones);
                        $res = R('Sms/send', array($phones, ['进程丢失'], '诗词大会'));
                    }
                }
                $this->ajaxReturn(array('status' => 1, 'msg' => '成功', 'data' => $data['data']));
            } else {
                $this->ajaxReturn(array('status' => 0, 'msg' => '没有启用的进程'));
            }
        } else {
            $this->ajaxReturn(array('status' => -1, 'msg' => '定时服务器地址有误'));
        }
    }

    /**
     * 检测页
     */
    public function check()
    {
        $this->display();
    }

    /**
     * 系统检测
     */
    public function systemCheck()
    {
        //栏目检测
        $check_data = array();
        $column_list = M('column')->where(array('column_status' => 1))->select();
        if (count($column_list) == 0) {
            $check_data['栏目检测'] = array('status' => 0, 'info' => '栏目未开启', 'advise' => '开启一个栏目');
        } else if (count($column_list) == 1) {
            $check_data['栏目检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
        } else {
            $check_data['栏目检测'] = array('status' => 0, 'info' => '栏目开启多个', 'advise' => '当且仅当开启一个栏目');
        }

        //期数检测
        if ($check_data['栏目检测']['status'] != 0) {
            $stage_list = M('stage')->where(array('column_id' => $column_list[0]['column_id'], 'stage_status' => 1))->select();
            if (count($stage_list) == 0) {
                $check_data['期数检测'] = array('status' => 0, 'info' => '期数未开启', 'advise' => '在开启的栏目下，开启一个期数');
            } else if (count($column_list) == 1) {
                $check_data['期数检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['期数检测'] = array('status' => 0, 'info' => '期数开启多个', 'advise' => '在开启的栏目下，当且仅当开启一个期数');
            }
            $end_stage = M('stage')->where(array('column_id' => $column_list[0]['column_id'], 'stage_remark' => 'COLUMN_END'))->select();
            if (count($end_stage) == 0) {
                $check_data['期数END检测'] = array('status' => 0, 'info' => '期数未设置COLUMN_END', 'advise' => '在开启的栏目下，设置最后一期的期数备注为：COLUMN_END');
            } else if (count($end_stage) == 1) {
                $more_stage = M('stage')->where(array('column_id' => $column_list[0]['column_id'], 'id' => array('GT', $end_stage[0]['id'])))->select();
                if (count($more_stage) == 0) {
                    $check_data['期数END检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
                } else {
                    $check_data['期数END检测'] = array('status' => -1, 'info' => '设置COLUMN_END的期数不是期数列表最后一期', 'advise' => '检查COLUMN_END设置的期数是否正确');
                }
            } else {
                $check_data['期数END检测'] = array('status' => 0, 'info' => 'COLUMN_END设置多个', 'advise' => '在开启的栏目下，当且仅当设置最后一期的期数备注为：COLUMN_END');
            }
        }

        //分组检测
        if ($check_data['期数检测']['status'] != 0) {
            $groupModel = M('group');
            $group_list = $groupModel->where(array('stage_id' => $stage_list[0]['stage_id'], 'group_status' => 1))->select();
            $all_group_list = $groupModel->where(array('stage_id' => $stage_list[0]['stage_id']))->select();
            if (count($group_list) == 0) {
                $check_data['分组检测'] = array('status' => 0, 'info' => '分组未开启', 'advise' => '在开启的期数下，开启需要开启的分组');
            } else if (count($group_list) == count($all_group_list)) {
                $check_data['分组检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['分组检测'] = array('status' => -1, 'info' => '存在未开启的分组', 'advise' => '查看需要使用的分组是否全部开启');
            }
        }

        //状态检测
        $this->connectRedis();
        if ($check_data['分组检测']['status'] != 0) {
            $qaOptionModel = D('QaOption');
            $group_ids = array_column($group_list, 'id');
			$group_names = array_column($group_list, 'group_title', 'id');
            $qa_list = M('qa')->where(array('stage_id' => $stage_list[0]['stage_id'], 'group_id' => array('IN', $group_ids)))->order('group_id+0 asc,id+0 asc')->select();
            $error_qa_status = array();
            $error_qa_answer = array();
            $error_qa_answer_sort = array();
            $error_qa_end = array();
            $error_qa_time = array();
            $error_qa_order = array();
            $error_qa_sync = array();
            foreach ($qa_list as $key => $qa) {
                //题面图片
                if ($qa['qa_subject_img'] > 0) {
                    $img_where = array('id' => $qa['qa_subject_img']);
                    $img_info = $this->getImageinfo($img_where);
                    $qa['qa_subject_img'] = C('PAGE_URL') . $img_info[0]['path'];
                }
                //选项
                $qaOption_where = array('qa_id' => $qa['id']);
                $qaOption_info = $qaOptionModel->getQaOptionInfo($qaOption_where);
                foreach ($qaOption_info as $option_key => $option_value) {
                    if ($option_value['option_img'] > 0) {
                        $option_img_where = array('id' => $option_value['option_img']);
                        $option_img_info = $this->getImageinfo($option_img_where);
                        $qaOption_info[$option_key]['option_img'] = C('PAGE_URL') . $option_img_info[0]['path'];
                    }
                }
                $qa['qa_options'] = $qaOption_info;
                $qa['qa_right_key'] = json_decode($qa['qa_right_key'], true);
                $qa['qa_bind_modules'] = $qa['qa_bind_modules'] ? json_decode($qa['qa_bind_modules'], true) : '';

                //检测
                if ($qa['qa_player_status'] != 0 || $qa['qa_normal_status'] != 0 || $qa['qa_is_used'] != 0 || $qa['qa_res_is_pushed'] != 0) {
                    array_push($error_qa_status, $qa['id']);
                }
                if ($qa['qa_right_key'] == '') {
                    array_push($error_qa_answer, $qa['id']);
                }
                if ($qa['qa_answer_sort'] == '') {
                    array_push($error_qa_answer_sort, $qa['id']);
                }
                if ($qa['qa_remark'] == '') {
                    if (!$qa_list[$key + 1] || ($qa_list[$key + 1]['group_id'] != $qa_list[$key]['group_id'])) {
                        array_push($error_qa_end, $qa['id']);
                    }
                } else if ($qa['qa_remark'] == 'END') {
                    if (!$qa_list[$key + 1] || ($qa_list[$key + 1]['group_id'] == $qa_list[$key]['group_id'])) {
                        array_push($error_qa_end, $qa['id']);
                    }
                } else if ($qa['qa_remark'] == 'STAGE_END') {
                    if ($qa_list[$key + 1]) {
                        array_push($error_qa_end, $qa['id']);
                    }
                } else {
                    array_push($error_qa_end, $qa['id']);
                }
                if (!($qa['qa_start_time'] < $qa['qa_end_time'] && $qa['qa_end_time'] < $qa['qa_res_time'])) {
                    array_push($error_qa_time, $qa['id']);
                } else if ($qa_list[$key + 1] && ($qa_list[$key]['qa_res_time'] > $qa_list[$key + 1]['qa_res_time'])) {
                    array_push($error_qa_time, $qa_list[$key + 1]['id']);
                }
                if (!$qa['qa_extend']) {
                    array_push($error_qa_order, $qa['id']);
                } else if ($qa_list[$key + 1] && $qa_list[$key + 1]['group_id'] == $qa_list[$key]['group_id'] && $qa_list[$key + 1]['qa_extend'] && ($qa_list[$key]['qa_extend'] + 1) != $qa_list[$key + 1]['qa_extend']) {
                    array_push($error_qa_order, $qa_list[$key + 1]['id']);
                }
				$qa['group_name'] = $group_names[$qa['group_id']];
                $sync_qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $qa['stage_id']), $qa['id']);
                if (!$sync_qa || ($sync_qa != json_encode($qa))) {
                    array_push($error_qa_sync, $qa['id']);
                }

            }

            if (count($error_qa_status) == 0) {
                $check_data['初始化检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['初始化检测'] = array('status' => 0, 'info' => '存在未初始化的题目', 'advise' => '题目：' . join(',', $error_qa_status) . '未重置，重置开启的分组下所有题目');
            }
            if (count($error_qa_answer) == 0) {
                $check_data['答案检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['答案检测'] = array('status' => 0, 'info' => '存在未维护答案的题目', 'advise' => '题目：' . join(',', $error_qa_answer) . '未维护答案，请检查');
            }
            if (count($error_qa_answer_sort) == 0) {
                $check_data['答案排序检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['答案排序检测'] = array('status' => 0, 'info' => '存在未维护答案排序的题目', 'advise' => '题目：' . join(',', $error_qa_answer_sort) . '未维护答案排序，请检查');
            }
            if (count($error_qa_end) == 0) {
                $check_data['题目END检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['题目END检测'] = array('status' => 0, 'info' => '存在题目备注状态错误的题目', 'advise' => '题目：' . join(',', $error_qa_end) . '备注状态错误，请检查');
            }
            if (count($error_qa_time) == 0) {
                $check_data['题目时间刻度检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['题目时间刻度检测'] = array('status' => 0, 'info' => '存在题目时间刻度错误的题目', 'advise' => '题目：' . join(',', $error_qa_time) . '时间刻度错误，请检查');
            }
            if (count($error_qa_order) == 0) {
                $check_data['题目序号检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['题目序号检测'] = array('status' => 0, 'info' => '存在题目序号错误的题目', 'advise' => '题目：' . join(',', $error_qa_order) . '序号错误，请检查');
            }
            if (count($error_qa_sync) == 0) {
                $check_data['题目预热检测'] = array('status' => 1, 'info' => '正常', 'advise' => '');
            } else {
                $check_data['题目预热检测'] = array('status' => 0, 'info' => '存在题目未预热或预热不同步的题目', 'advise' => '题目：' . join(',', $error_qa_sync) . '预热有误，请检查');
            }
        }
        $this->ajaxReturn(array('status' => 1, 'msg' => '检测成功', 'data' => $check_data));
    }

    /**
     * api检测
     */
    public function apiCheck()
    {
        set_time_limit(0);
        $ip_list = $_FILES['ip_list'];
        if ($ip_list['tmp_name']) {
            $ip_list = file_get_contents($ip_list['tmp_name']);
            $ip_list = explode("\r\n", $ip_list);
            foreach ($ip_list as $key => $ip) {
                $url = trim("http://" . $ip) . '/studio-v3/api.php?s=Api/Qa/checkApi';
                $res = http($url, array(), 'get', array("Content-type: text/html; charset=utf-8"));
                $res = json_decode($res, true);
                if (isset($res['status']) || !is_null($res)) {
                    $check_data[$key]['ip'] = $ip;
                    $check_data[$key]['status'] = 'success';
                    $check_data[$key]['info'] = $res['msg'];
                } else {
                    $check_data[$key]['ip'] = $ip;
                    $check_data[$key]['status'] = 'error';
                    $check_data[$key]['info'] = $res['msg'];
                }
            }
            $this->ajaxReturn(array('status' => 1, 'msg' => '成功', 'data' => $check_data));
        } else {
            $this->ajaxReturn(array('status' => 0, 'msg' => '上传文件失败'));
        }
    }
}