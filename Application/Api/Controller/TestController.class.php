<?php

namespace Api\Controller;

use Think\Log;

class TestController extends ApiBaseController
{
    const APP_ID = 1400066356;
    const APP_KEY = "487e5a881c2623c824921853b2db094c";
    const TEMPLETE_ID = 83274;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        vendor('Sms.SmsSenderUtil');
        vendor('Sms.SmsMultiSender');
    }

    public function sendWeChatMsm()
    {
        $tokenUrl = 'https://api.weixin.qq.com/cgi-bin/token';
        $tokenData = array(
            'grant_type' => 'client_credential',
            'appid'      => 'wx3001b7f3eae15466',
            'secret'     => '2457487104a356cdf654d582deda8399'
        );
        $tokenHeader = array("Content-type: application/json; charset=utf-8");
        $token_info = http($tokenUrl, $tokenData, 'GET', $tokenHeader);
        $token_info = json_decode($token_info, true);
        $token = $token_info['access_token'];

        $url = 'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=' . $token;
        $header = array("Content-type: application/x-www-form-urlencoded; charset=utf-8");
        $data = array(
            'touser'  => 'wxid_van19931205',
            'msgtype' => 'text',
            'text'    => array('content' => '测试API')
        );
        $res = http($url, $data, 'POST', $header);
        $res = json_decode($res, true);
        $this->ajaxReturn($res);
    }
	
	/**
     * 清除缓存
     * 上线必须删除
     */
    public function clearCache()
    {
		$this->ajaxReturn(array('code' => 0, 'msg' => '禁用'), $this->format);
		$this->connectRedis();
        if (I('key') == 'ctvit') {
            $arr = array(
                $this->redis->keys(C('REDIS_INDEX') . '*')
            );
            $this->redis->del(array_reduce($arr, 'array_merge', array()));
            M()->execute('TRUNCATE TABLE wei_qa_log');
			M()->execute('TRUNCATE TABLE wei_qa_lucky_prize');
            M()->execute('TRUNCATE TABLE wei_qa_lucky_user');
            $this->ajaxReturn(array('code' => 1, 'msg' => '成功', 'data' => array_reduce($arr, 'array_merge', array())), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '非法'), $this->format);
        }
    }
	
	public function appendLucky()
	{
		$this->ajaxReturn(array('status' => 0, 'msg' => 'error'));
		$this->connectRedis();
		set_time_limit(0);
		
		$column_id = I('column_id', 'Column15215257455ab0a3f17691d');
        $stage_id = I('stage_id', 'Stage15226525155ac1d563070f8');
        $group_id = I('group_id', 41);
        $ranking_start = I('ranking_start', 1);
        $ranking_end = I('ranking_end', 100);
        $qa_lucky_list_number = I('qa_lucky_list_number', 20);
        $qa_lucky_list_type = I('qa_lucky_list_type', 3);

        if (!$column_id || !$stage_id || !$group_id) {
            $this->ajaxReturn(array('status' => -1, 'msg' => '请在节目开始后操作'));
        }

        if (!in_array($qa_lucky_list_type, array(1, 2, 3)) || !$ranking_start || !$ranking_end || !$qa_lucky_list_number) {
            $this->ajaxReturn(array('status' => -1, 'msg' => '参数无效'));
        }

        if (($qa_lucky_list_number - 1) > ($ranking_end - $ranking_start)) {
            $this->ajaxReturn(array('status' => -2, 'msg' => '生成总数不能大于排名区间'));
        }

        switch ($qa_lucky_list_type) {
            case 1:
                $get_ranking_key = 'QA.GROUP_QA_RANKING_LIST';
                $get_ranking_id = $group_id;
                break;
            case 2:
                $get_ranking_key = 'QA.STAGE_QA_RANKING_LIST';
                $get_ranking_id = $stage_id;
                break;
            case 3:
                $get_ranking_key = 'QA.TOTAL_QA_RANKING_LIST';
                $get_ranking_id = false;
                break;
        }

        $max_ranking_count = $this->redis->zCard(get_redis_key($get_ranking_key, $get_ranking_id));
        $ranking_end = $ranking_end > $max_ranking_count ? $max_ranking_count : $ranking_end;
        $qa_lucky_list_number = ($qa_lucky_list_number - 1) > ($ranking_end - $ranking_start) ? $ranking_end - $ranking_start + 1 : $qa_lucky_list_number;
		
		$has_lucky = M('qa_lucky_user')->field('user_ranking')->where(array('user_lucky_type'=>3))->select();
		$has_lucky = array_column($has_lucky,'user_ranking');
		
        $rand_init_array = range($ranking_start, $ranking_end);		
		$rand_array_all = array_diff($rand_init_array,$has_lucky);		
        $rand_array = array_rand($rand_array_all, $qa_lucky_list_number);
        $rand_array_key = is_array($rand_array) ? $rand_array : array($rand_array);
		
        $lucky_list = array();
		       
		shuffle($rand_array_key);

        foreach ($rand_array_key as $key => $ranking_key) {
            $ranking = $rand_init_array[$ranking_key];
            $ranking_user = $this->redis->zRevRange(get_redis_key($get_ranking_key, $get_ranking_id), $ranking - 1, $ranking - 1);
            $user_id = $ranking_user[0];
            $ranking_user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $user_id);
            $ranking_user_info = json_decode($ranking_user_info, true);
            $lucky_list[$key] = array(
                'column_id'       => $column_id,
                'stage_id'        => $stage_id,
                'group_id'        => $group_id,
                'user_id'         => $user_id,
                'user_name'       => $ranking_user_info['user_name'] ? $ranking_user_info['user_name'] : '',
                'user_source'     => $ranking_user_info['user_source'] ? $ranking_user_info['user_source'] : '',
                'user_phone'      => $ranking_user_info['user_phone'] ? $ranking_user_info['user_phone'] : '',
                'user_head'       => $ranking_user_info['user_head'] ? $ranking_user_info['user_head'] : '',
                'user_age'        => $ranking_user_info['user_age'] ? $ranking_user_info['user_age'] : '',
                'user_sex'        => $ranking_user_info['user_sex'] ? $ranking_user_info['user_sex'] : '',
                'user_city'       => $ranking_user_info['user_city'] ? $ranking_user_info['user_city'] : '',
                'user_ranking'    => $ranking,
                'user_lucky_type' => $qa_lucky_list_type,
                'user_create'     => time()
            );
        }

        if (count($lucky_list)) {
            $qaLuckyUserModel = M('qa_lucky_user');
            switch ($qa_lucky_list_type) {
                case 1:
                    $where = array('user_lucky_type' => 1, 'group_id' => $group_id);
                    break;
                case 2:
                    $where = array('user_lucky_type' => 2, 'stage_id' => $stage_id);
                    break;
                case 3:
                    $where = array('user_lucky_type' => 3, 'column_id' => $column_id);
                    break;
            }

            //$del_res = $qaLuckyUserModel->where($where)->delete();
            $add_res = $qaLuckyUserModel->addAll($lucky_list);
            if ($add_res) {
                $this->ajaxReturn(array('status' => 1, 'msg' => '生成成功'));
            }
        }
        $this->ajaxReturn(array('status' => 0, 'msg' => '生成失败'));
	}

    public function test() {
        file_put_contents(C('LOG_PATH').'1.log',json_encode(I('server_ip')));
        //file_put_contents(C('LOG_PATH').'2.log',json_encode($_POST));
    }
}