<?php

namespace Api\Controller;

use Think\Exception;
use Think\Log;
use Think\Daemon;

class DaemonController extends ApiBaseController
{

    public function _initialize()
    {
        if (PHP_SAPI != 'cli') {
            die('CLI ONLY');
        }
        set_time_limit(0);
        ob_end_flush();
        $this->connectRedis();
    }

    /**
     * 获取当前时间+偏移量
     */
    private function getNowTime()
    {
        $push_offset = $this->redis->get(get_redis_key('QA.PUSH_OFFSET'));
        $now = $push_offset && is_numeric($push_offset) && is_int($push_offset / 1) ? time() + $push_offset : time();

        return $now;
    }

    /**
     * 推送答题
     */
    public function pushQa()
    {
        try {
            $type = 'PushQa';
            $daemon = new Daemon($type . $type);
            if ($daemon->start()) {
                $columnModel = M('column');
                $stageModel = M('stage');
                $groupModel = M('group');
                $qaModel = M('qa');
                while ($daemon->checkRunning()) {
                    $column_info = $columnModel->field('column_id')->where(array('column_status' => 1))->find();
                    if ($column_info) {
                        $column_id = $column_info['column_id'];
                        $stage_info = $stageModel->field('stage_id')->where(array('column_id' => $column_id, 'stage_status' => 1))->find();
                        if ($stage_info) {
                            $stage_id = $stage_info['stage_id'];
                            $group_info = $groupModel->field('id')->where(array('stage_id' => $stage_id, 'group_status' => 1))->select();
                            if ($group_info) {
                                $group_id = array_column($group_info, 'id');
                                $now = $this->getNowTime();
                                $where = array(
                                    'stage_id'         => $stage_id,
                                    'group_id'         => array('IN', $group_id),
                                    'qa_start_time'    => array('ELT', $now),
                                    'qa_end_time'      => array('EGT', $now),
                                    'qa_is_used'       => 0,
                                    'qa_normal_status' => 0
                                );
                                $qa_info = $qaModel->field('id,group_id')->where($where)->find();
                                if ($qa_info) {
                                    $qa_id = $qa_info['id'];
                                    $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $stage_id), $qa_id);
                                    if ($qa) {
                                        $qa = json_decode($qa, true);
                                        $qa = pack_push_qa($qa, $now);
                                        $cmd = C('QA.CMD');
                                        $res = webSocket_push($cmd['PUSH_QA'], $qa);
                                        $res = json_decode($res, true);
                                        if ($res['code'] == 0) {
                                            $qa_current = array('column_id' => $column_id, 'stage_id' => $stage_id, 'group_id' => $qa_info['group_id'], 'qa_id' => $qa_id);
                                            $this->redis->set(get_redis_key('QA.QA_CURRENT'), json_encode($qa_current));
                                            $update = array('qa_is_used' => 1, 'qa_normal_status' => 1, 'qa_used_time' => time());
                                            $where = array('id' => $qa_id);
                                            $update_res = $qaModel->where($where)->save($update);
                                            !$update_res && Log::write('fail:题目推送成功，状态更新失败', 'WARN', '', C('LOG_PATH') . 'PushQa_' . date('y_m_d') . '.log');
                                        } else {
                                            Log::write('fail:题目推送失败', 'WARN', '', C('LOG_PATH') . 'PushQa_' . date('y_m_d') . '.log');
                                        }
                                    }
                                }
                            }
                        }
                    }
                    usleep(100000);
                }
                $daemon->stop();
                unset ($daemon);
            }
        } catch (Exception $e) {
            Log::write('fail：' . $e->getMessage(), 'WARN', '', C('LOG_PATH') . 'PushQa_' . date('y_m_d') . '.log');
        }
    }

    /**
     * 推送答题结果
     */
    public function pushQaResult()
    {
        try {
            $type = 'pushQaResult';
            $daemon = new Daemon($type . $type);
            if ($daemon->start()) {
                $columnModel = M('column');
                $stageModel = M('stage');
                $groupModel = M('group');
                $qaModel = M('qa');
                while ($daemon->checkRunning()) {
                    $column_info = $columnModel->field('column_id')->where(array('column_status' => 1))->find();
                    if ($column_info) {
                        $column_id = $column_info['column_id'];
                        $stage_info = $stageModel->field('stage_id')->where(array('column_id' => $column_id, 'stage_status' => 1))->find();
                        if ($stage_info) {
                            $stage_id = $stage_info['stage_id'];
                            $group_info = $groupModel->field('id')->where(array('stage_id' => $stage_id, 'group_status' => 1))->select();
                            if ($group_info) {
                                $group_id = array_column($group_info, 'id');
                                $now = $this->getNowTime();
                                $where = array(
                                    'stage_id'         => $stage_id,
                                    'group_id'         => array('IN', $group_id),
                                    'qa_res_time'      => array('ELT', $now),
                                    'qa_is_used'       => 1,
                                    'qa_normal_status' => 1,
                                    'qa_res_is_pushed' => 0
                                );
                                $qa_info = $qaModel->field('id,group_id,qa_remark')->where($where)->find();
                                if ($qa_info) {
                                    $qa_id = $qa_info['id'];
                                    $data = array('column_id' => $column_id, 'stage_id' => $stage_id, 'group_id' => $qa_info['group_id'], 'qa_id' => $qa_id);
                                    $cmd = C('QA.CMD');
                                    $res = webSocket_push($cmd['PUSH_QA_ANSWER'], $data);
                                    $res = json_decode($res, true);
                                    if ($res['code'] == 0) {
                                        if (strtoupper($qa_info['qa_remark']) == 'END' || strtoupper($qa_info['qa_remark']) == 'STAGE_END') {
                                            $used_group_list = $this->redis->hGet(get_redis_key('QA.QA_USED_STAGE_GROUP'), $stage_id);
                                            $used_group_list = $used_group_list ? json_decode($used_group_list, true) : array();
                                            array_push($used_group_list, $qa_info['group_id']);
                                            $this->redis->hSet(get_redis_key('QA.QA_USED_STAGE_GROUP'), $stage_id, json_encode($used_group_list));
                                        }
                                        $update = array('qa_res_is_pushed' => 1, 'qa_res_pushed_time' => time());
                                        $where = array('id' => $qa_id);
                                        $update_res = $qaModel->where($where)->save($update);
                                        !$update_res && Log::write('fail:题目结果推送成功，状态更新失败', 'WARN', '', C('LOG_PATH') . 'PushQaRes_' . date('y_m_d') . '.log');
                                    } else {
                                        Log::write('fail:题目结果推送失败', 'WARN', '', C('LOG_PATH') . 'PushQaRes_' . date('y_m_d') . '.log');
                                    }
                                }
                            }
                        }
                    }
                    usleep(100000);
                }
                $daemon->stop();
                unset ($daemon);
            }
        } catch (Exception $e) {
            Log::write('fail：' . $e->getMessage(), 'WARN', '', C('LOG_PATH') . 'PushQaRes_' . date('y_m_d') . '.log');
        }
    }

    /**
     * 答题记录入库
     */
    public function qaLog()
    {
        try {
            $type = 'qaLog';
            $daemon = new Daemon($type . $type);
            if ($daemon->start()) {
                $qaLogModel = M('qa_log');
                while ($daemon->checkRunning()) {
                    if ($this->redis->lLen(get_redis_key('QA.QA_ANSWER_QUEUE'))) {
                        $data = $this->redis->lPop(get_redis_key('QA.QA_ANSWER_QUEUE'));
                        $data = json_decode($data, true);
                        $data['answer_key'] = json_encode($data['answer_key']);
                        $res = $qaLogModel->add($data);
                        !$res && Log::write('set qa log fail：' . $qaLogModel->getLastSql(), 'WARN', '', C('LOG_PATH') . 'QaLog_' . date('y_m_d') . '.log');
                    }
                    usleep(100000);
                }
                $daemon->stop();
                unset ($daemon);
            }
        } catch (Exception $e) {
            Log::write('fail：' . $e->getMessage(), 'WARN', '', C('LOG_PATH') . 'QaLog_' . date('y_m_d') . '.log');
        }
    }
}