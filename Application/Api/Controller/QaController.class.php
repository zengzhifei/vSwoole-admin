<?php
/**
 * Created by PhpStorm.
 * User: zengz
 * Date: 2017/12/4
 * Time: 15:23
 */

namespace Api\Controller;


class QaController extends ApiBaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        //缓存连接
        $this->connectRedis();
    }

    /**
     * 获取当前时间可以使用的题目
     */
    public function getQa()
    {
        $user_id = I('user_id', false);
        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if ($qa_current) {
            $qa_current = json_decode($qa_current, true);
            $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $qa_current['stage_id']), $qa_current['qa_id']);
            if ($qa) {
                $qa = json_decode($qa, true);
                $now = $this->getNowTime();
                if ($now >= $qa['qa_start_time'] && $now <= $qa['qa_end_time']) {
                    $qa = pack_push_qa($qa, $now);
                    $qa['is_answered'] = $user_id ? $this->redis->hGet(get_redis_key('QA.QA_ANSWER_ONCE_LOG', $qa['id']), $user_id) : false;
                    $this->ajaxReturn(array('code' => 1, 'msg' => '请求成功', 'data' => $qa), $this->format);
                }
            } else {
                $this->ajaxReturn(array('code' => -1, 'msg' => '题目未同步缓存'), $this->format);
            }
        }

        $this->ajaxReturn(array('code' => 0, 'msg' => '查询时间不在允许时间范围内'), $this->format);
    }

    /**
     * 获取当前问答进程状态
     */
    public function getQaProcessStatus()
    {
        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if ($qa_current) {
            $qa_current = json_decode($qa_current, true);
            $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $qa_current['stage_id']), $qa_current['qa_id']);
            if ($qa) {
                $qa = json_decode($qa, true);
                $now = $this->getNowTime();
                if ($now >= $qa['qa_start_time'] && $now < $qa['qa_end_time']) {
                    $this->ajaxReturn(array('code' => 1, 'msg' => '答题进行中'), $this->format);
                } else if ($now >= $qa['qa_end_time'] && $now < $qa['qa_res_time']) {
                    $this->ajaxReturn(array('code' => 2, 'msg' => '答题结束，等待公布答案'), $this->format);
                } else if (strtoupper($qa['qa_remark']) === 'STAGE_END') {
                    $stageTime = $this->redis->hGet(get_redis_key('QA.QA_STAGE_INFO'), $qa['stage_id']);
                    $stageTime = $stageTime ? json_decode($stageTime, true) : null;
                    if ($now >= $stageTime['stage_start_time'] && $now <= $stageTime['stage_end_time']) {
                        $this->ajaxReturn(array('code' => 4, 'msg' => '本期已结束，等待下一期'), $this->format);
                    } else {
                        $this->ajaxReturn(array('code' => 0, 'msg' => '活动未开始'), $this->format);
                    }
                } else {
                    $this->ajaxReturn(array('code' => 3, 'msg' => '答案已公布，等待下一题'), $this->format);
                }
            }
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '活动未开始'), $this->format);
        }
    }


    /**
     * 提交用户信息
     */
    public function saveUserInfo()
    {
        $data = array(
            'user_id'       => I('user_id', false),
            'user_name'     => I('user_name', ''),
            'user_nickname' => I('user_nickname', ''),
            'user_source'   => I('user_source', 1),
            'user_phone'    => I('user_phone', ''),
            'user_head'     => I('user_head', ''),
            'user_age'      => I('user_age', ''),
            'user_sex'      => I('user_sex', ''),
            'user_address'  => I('user_address', ''),
            'user_create'   => time()
        );

        if (!$data['user_id']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: user_id'), $this->format);
        }
        if (!$data['user_phone']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: user_phone'), $this->format);
        }

        $list_res = $this->redis->rPush(get_redis_key('QA.QA_USER_QUEUE'), json_encode($data));
        $hash_res = $this->redis->hSet(get_redis_key('QA.QA_USER_INFO'), $data['user_id'], json_encode($data));
        if ($list_res && $hash_res) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '提交成功'), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '提交失败'), $this->format);
        }
    }

    /**
     * 提交题目答案
     */
    public function saveQa()
    {
        //获取参数
        $data = array(
            'stage_id'        => I('stage_id', false),
            'group_id'        => I('group_id', false),
            'qa_id'           => I('qa_id', false),
            'user_type'       => I('user_type', 1001),
            'user_id'         => I('user_id', 0),
            'user_name'       => I('user_name', ''),
            'user_head'       => I('user_head', ''),
            'user_phone'      => I('user_phone', ''),
            'user_sex'        => I('user_sex', ''),
            'user_city'       => I('user_city', ''),
            'answer_key'      => I('answer_key', '', 'htmlspecialchars_decode'),
            'is_right'        => 0,
            'answer_duration' => I('answer_duration', 1),
            'time'            => time()
        );
        $user_info = array(
            'user_id'     => I('user_id', false),
            'user_name'   => I('user_name', ''),
            'user_head'   => I('user_head', ''),
            'user_phone'  => I('user_phone', ''),
            'user_sex'    => I('user_sex', ''),
            'user_city'   => I('user_city', ''),
            'user_source' => I('user_source', 1),
            'user_token'  => I('user_token', false),
            'user_create' => time()
        );

        //参数验证
        if (!$data['stage_id']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: stage_id'), $this->format);
        }
        if (!$data['group_id']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: group_id'), $this->format);
        }
        if (!$data['qa_id']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: qa_id'), $this->format);
        }
        if (!$data['user_id']) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '无效参数: user_id'), $this->format);
        }

        //用户ID合法性验证
        if (!$this->checkAppUserId($user_info['user_token'])) {
            $this->ajaxReturn(array('code' => -2, 'msg' => '非法用户'), $this->format);
        }

        //题目合法性验证
        $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $data['stage_id']), $data['qa_id']);
        if (!$qa) {
            $this->ajaxReturn(array('code' => -3, 'msg' => '题目不存在'), $this->format);
        }

        //答案提交时间验证
        $qa = json_decode($qa, true);
        $now = $this->getNowTime();
        if ($now < $qa['qa_start_time'] || $now > $qa['qa_end_time']) {
            $this->ajaxReturn(array('code' => -4, 'msg' => '答题不在允许时间内'), $this->format);
        }

        //用户提交记录验证
        $once_user_log = $this->redis->hGet(get_redis_key('QA.QA_ANSWER_ONCE_LOG', $data['qa_id']), $data['user_id']);
        if ($once_user_log) {
            $this->ajaxReturn(array('code' => -5, 'msg' => '重复提交'), $this->format);
        } else {
            $this->redis->hSetNX(get_redis_key('QA.QA_ANSWER_ONCE_LOG', $data['qa_id']), $data['user_id'], 1);
        }

        //数据处理
        $data['answer_duration'] = intval($data['answer_duration']) < 1 ? 1 : intval($data['answer_duration']);
        $data['answer_duration'] = intval($data['answer_duration']) > $qa['qa_countdown'] * 1000 ? $qa['qa_countdown'] * 1000 : intval($data['answer_duration']);
        $data['answer_key'] = json_decode($data['answer_key'], true);

        //判断答案结果
        if ($data['answer_key'] && is_array($data['answer_key'])) {
            if ($qa['qa_answer_sort'] == 1) {
                sort($qa['qa_right_key']);
                sort($data['answer_key']);
                $data['is_right'] = compareWithArr($data['answer_key'], $qa['qa_right_key']) ? 1 : 0;
            } else {
                $data['is_right'] = compareWithArr($data['answer_key'], $qa['qa_right_key']) ? 1 : 0;
            }
        }

        //数据写入队列
        $res = $this->redis->lPush(get_redis_key('QA.QA_ANSWER_QUEUE'), json_encode($data));

        //数据写入单题记录
        $one_answer_data = array(
            'answer_value'    => $data['answer_key'],
            'answer_right'    => $data['is_right'],
            'answer_use_time' => $data['answer_duration'],
            'answer_time'     => $data['is_right'] == 1 ? $data['answer_duration'] : 0,
            'answer_score'    => $data['is_right'] == 1 ? C('QA.QA_BASE_SCORE') : 0
        );
        $this->redis->hSet(get_redis_key('QA.ONE_QA_ANSWER_LOG', $data['qa_id']), $data['user_id'], json_encode($one_answer_data));
        //数据写入分组记录
        $group_answer_log = $this->redis->hGet(get_redis_key('QA.GROUP_QA_ANSWER_LOG', $data['group_id']), $data['user_id']);
        if ($group_answer_log) {
            $group_answer_log = json_decode($group_answer_log, true);
            $group_answer_data = array(
                'answer_count'       => $group_answer_log['answer_count'] + 1,
                'answer_right_count' => $data['is_right'] == 1 ? $group_answer_log['answer_right_count'] + 1 : $group_answer_log['answer_right_count'],
                'answer_time_count'  => $data['is_right'] == 1 ? $group_answer_log['answer_time_count'] + $data['answer_duration'] : $group_answer_log['answer_time_count'],
                'answer_score_count' => $data['is_right'] == 1 ? $group_answer_log['answer_score_count'] + C('QA.QA_BASE_SCORE') : $group_answer_log['answer_score_count']
            );
        } else {
            $group_answer_data = array(
                'answer_count'       => 1,
                'answer_right_count' => $data['is_right'] == 1 ? 1 : 0,
                'answer_time_count'  => $data['is_right'] == 1 ? $data['answer_duration'] : 0,
                'answer_score_count' => $data['is_right'] == 1 ? C('QA.QA_BASE_SCORE') : 0
            );
        }
        $this->redis->hSet(get_redis_key('QA.GROUP_QA_ANSWER_LOG', $data['group_id']), $data['user_id'], json_encode($group_answer_data));
        //数据写入分期记录
        $stage_answer_log = $this->redis->hGet(get_redis_key('QA.STAGE_QA_ANSWER_LOG', $data['stage_id']), $data['user_id']);
        if ($stage_answer_log) {
            $stage_answer_log = json_decode($stage_answer_log, true);
            $stage_answer_data = array(
                'answer_count'       => $stage_answer_log['answer_count'] + 1,
                'answer_right_count' => $data['is_right'] == 1 ? $stage_answer_log['answer_right_count'] + 1 : $stage_answer_log['answer_right_count'],
                'answer_time_count'  => $data['is_right'] == 1 ? $stage_answer_log['answer_time_count'] + $data['answer_duration'] : $stage_answer_log['answer_time_count'],
                'answer_score_count' => $data['is_right'] == 1 ? $stage_answer_log['answer_score_count'] + C('QA.QA_BASE_SCORE') : $stage_answer_log['answer_score_count']
            );
        } else {
            $stage_answer_data = array(
                'answer_count'       => 1,
                'answer_right_count' => $data['is_right'] == 1 ? 1 : 0,
                'answer_time_count'  => $data['is_right'] == 1 ? $data['answer_duration'] : 0,
                'answer_score_count' => $data['is_right'] == 1 ? C('QA.QA_BASE_SCORE') : 0
            );
        }
        $this->redis->hSet(get_redis_key('QA.STAGE_QA_ANSWER_LOG', $data['stage_id']), $data['user_id'], json_encode($stage_answer_data));
        //数据写入总记录
        $total_answer_log = $this->redis->hGet(get_redis_key('QA.TOTAL_QA_ANSWER_LOG'), $data['user_id']);
        if ($total_answer_log) {
            $total_answer_log = json_decode($total_answer_log, true);
            $total_answer_data = array(
                'answer_count'       => $total_answer_log['answer_count'] + 1,
                'answer_right_count' => $data['is_right'] == 1 ? $total_answer_log['answer_right_count'] + 1 : $total_answer_log['answer_right_count'],
                'answer_time_count'  => $data['is_right'] == 1 ? $total_answer_log['answer_time_count'] + $data['answer_duration'] : $total_answer_log['answer_time_count'],
                'answer_score_count' => $data['is_right'] == 1 ? $total_answer_log['answer_score_count'] + C('QA.QA_BASE_SCORE') : $total_answer_log['answer_score_count']
            );
        } else {
            $total_answer_data = array(
                'answer_count'       => 1,
                'answer_right_count' => $data['is_right'] == 1 ? 1 : 0,
                'answer_time_count'  => $data['is_right'] == 1 ? $data['answer_duration'] : 0,
                'answer_score_count' => $data['is_right'] == 1 ? C('QA.QA_BASE_SCORE') : 0
            );
        }
        $this->redis->hSet(get_redis_key('QA.TOTAL_QA_ANSWER_LOG'), $data['user_id'], json_encode($total_answer_data));

        //数据写入单题榜单
        $one_score_time = $one_answer_data['answer_time'] > 0 ? 1000 / ($one_answer_data['answer_time'] + 1000) : 0;
        $one_user_score = $one_answer_data['answer_score'] + $one_score_time;
        $this->redis->zAdd(get_redis_key('QA.ONE_QA_RANKING_LIST', $data['qa_id']), $one_user_score, $data['user_id']);
        //数据写入分组榜单
        $group_score_time = $group_answer_data['answer_time_count'] > 0 ? 1000 / ($group_answer_data['answer_time_count'] + 1000) : 0;
        $group_user_score = $group_answer_data['answer_score_count'] + $group_score_time;
        $this->redis->zAdd(get_redis_key('QA.GROUP_QA_RANKING_LIST', $data['group_id']), $group_user_score, $data['user_id']);
        //数据写入分期榜单
        $stage_score_time = $stage_answer_data['answer_time_count'] > 0 ? 1000 / ($stage_answer_data['answer_time_count'] + 1000) : 0;
        $stage_user_score = $stage_answer_data['answer_score_count'] + $stage_score_time;
        $this->redis->zAdd(get_redis_key('QA.STAGE_QA_RANKING_LIST', $data['stage_id']), $stage_user_score, $data['user_id']);
        //数据写入总榜单
        $total_score_time = $total_answer_data['answer_time_count'] > 0 ? 1000 / ($total_answer_data['answer_time_count'] + 1000) : 0;
        $total_user_score = $total_answer_data['answer_score_count'] + $total_score_time;
        $this->redis->zAdd(get_redis_key('QA.TOTAL_QA_RANKING_LIST'), $total_user_score, $data['user_id']);

        //用户信息记录
        $this->redis->hSetNX(get_redis_key('QA.QA_USER_INFO'), $user_info['user_id'], json_encode($user_info));

        if ($res) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '提交成功'), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '提交失败'), $this->format);
        }
    }

    /**
     * 获取分组排行（场内大屏）
     */
    public function getQaGroupRankingListByVenue()
    {
        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if ($qa_current) {
            $qa_current = json_decode($qa_current, true);
            $group_id = $qa_current['group_id'];
            $limit = I('limit', 10, 'intval');
            $limit = $limit > 0 ? $limit - 1 : 0;
            $title = I('title', '微信摇电视');
            $group_ranking_list = $this->redis->zRevRange(get_redis_key('QA.GROUP_QA_RANKING_LIST', $group_id), 0, $limit, true);
            if ($group_ranking_list) {
                $i = 1;
                foreach ($group_ranking_list as $key => $value) {
                    $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                    $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                    $data[] = array(
                        'id'    => $i++,
                        'phone' => mb_strlen($user_info['user_phone'], 'utf8') == 11 ? substr_replace($user_info['user_phone'], '****', 3, 4) : '',
                        'title' => $title
                    );
                }
                $this->ajaxReturn(array('code' => 0, 'msg' => '获取成功', 'data' => $data), $this->format);
            } else {
                $this->ajaxReturn(array('code' => 1, 'msg' => '当前分组未生成可用排行'), $this->format);
            }
        } else {
            $this->ajaxReturn(array('code' => 1, 'msg' => '答题未开启'), $this->format);
        }
    }

    /**
     * 获取城市热力图（JAVA端调用）
     */
    public function getHeatMap()
    {
        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if ($qa_current) {
            $qa_current = json_decode($qa_current, true);
            $qaLogModel = M('qa_log');
            $field = 'count(*) as count,user_city as name';
            $where = array('stage_id' => $qa_current['stage_id'], "user_city" => array("neq", ""));
            $group = 'user_city';
            $order = 'count(*) DESC';
            $heatMapData = $qaLogModel->field($field)->where($where)->group($group)->order($order)->select();
            $total = $qaLogModel->field('count(DISTINCT user_id) as total')->where($where)->find();
            if ($heatMapData) {
                foreach ($heatMapData as $key => $city) {
                    $heatMapData[$key]['id'] = $key + 1;
                }
                $this->ajaxReturn(array('code' => 0, 'msg' => '成功', 'total' => $total['total'], 'data' => $heatMapData), $this->format);
            } else {
                $this->ajaxReturn(array('code' => 1, 'msg' => '暂无数据'), $this->format);
            }
        } else {
            $this->ajaxReturn(array('code' => 1, 'msg' => '活动暂未开始'), $this->format);
        }
    }

    /**
     * 获取用户答题结果
     */
    public function getQaResult()
    {
        $user_id = I('user_id', false);
        $user_token = I('user_token', false);
        if (!$user_id) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：user_id'), $this->format);
        }

        //验证用户ID
        if (!$this->checkAppUserId($user_token)) {
            $this->ajaxReturn(array('code' => -2, 'msg' => '非法用户'), $this->format);
        }

        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if (!$qa_current) {
            $this->ajaxReturn(array('code' => -3, 'msg' => '答题未开始'), $this->format);
        }

        $qa_current = json_decode($qa_current, true);
        $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $qa_current['stage_id']), $qa_current['qa_id']);
        if (!$qa) {
            $this->ajaxReturn(array('code' => -4, 'msg' => '题目不存在'), $this->format);
        }

        $qa = json_decode($qa, true);
        $now = $this->getNowTime();
        // if ($now < $qa['qa_res_time']) {
            // $this->ajaxReturn(array('code' => -5, 'msg' => '查询时间不被允许'), $this->format);
        // }

        if ($qa['qa_right_key']) {
            $qa_options = array_column($qa['qa_options'], 'option_title', 'option_number');
            foreach ($qa['qa_right_key'] as $answer_key => $answer_value) {
                $qa['qa_right_key'][$answer_key] = $qa_options[$answer_value];
            }
        }
        $my_answer = $this->redis->hGet(get_redis_key('QA.ONE_QA_ANSWER_LOG', $qa_current['qa_id']), $user_id);
        $my_answer_stage = $this->redis->hGet(get_redis_key('QA.STAGE_QA_ANSWER_LOG', $qa_current['stage_id']), $user_id);
        $my_answer_stage = $my_answer_stage ? json_decode($my_answer_stage, true) : false;
        if (!$my_answer) {
            $my_answer = array(
                'answer_value'       => null,
                'answer_right'       => 0,
                'answer_time'        => null,
                'answer_use_time'    => null,
                'answer_score'       => 0,
                'qa_answer_value'    => $qa['qa_right_key'],
                'stage_answer_score' => $my_answer_stage ? $my_answer_stage['answer_score_count'] : 0
            );
        } else {
            $my_answer = json_decode($my_answer, true);
            $my_answer['qa_answer_value'] = $qa['qa_right_key'];
            $my_answer['stage_answer_score'] = $my_answer_stage ? $my_answer_stage['answer_score_count'] : 0;
        }

        $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $my_answer, 'current' => $qa['qa_remark']), $this->format);
    }

    /**
     * 获取每期证书数据
     */
    public function getQaStageCert()
    {
        $user_id = I('user_id', false);
        $user_token = I('user_token', false);
        if (!$user_id) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：user_id'), $this->format);
        }

        //验证用户ID
        if (!$this->checkAppUserId($user_token)) {
            $this->ajaxReturn(array('code' => -2, 'msg' => '非法用户'), $this->format);
        }

        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if (!$qa_current) {
            $this->ajaxReturn(array('code' => -3, 'msg' => '答题未开始'), $this->format);
        }

        $qa_current = json_decode($qa_current, true);
        $qa = $this->redis->hGet(get_redis_key('QA.QA_LIST', $qa_current['stage_id']), $qa_current['qa_id']);
        if (!$qa) {
            $this->ajaxReturn(array('code' => -4, 'msg' => '题目不存在'), $this->format);
        }

        $qa = json_decode($qa, true);
        $now = $this->getNowTime();
        if ($now < $qa['qa_end_time'] || strtoupper($qa['qa_remark']) != 'STAGE_END') {
            $this->ajaxReturn(array('code' => -5, 'msg' => '本期未结束'), $this->format);
        }

        $answer_data = $this->redis->hGet(get_redis_key('QA.STAGE_QA_ANSWER_LOG', $qa_current['stage_id']), $user_id);
        $answer_data = json_decode($answer_data, true);
        $total_qa = $this->redis->hLen(get_redis_key('QA.QA_LIST', $qa_current['stage_id']));
        $total_qa_score = $total_qa * C('QA.QA_BASE_SCORE');
        $total_user = $this->getQaUserJoinCount(get_redis_key('QA.STAGE_QA_RANKING_LIST', $qa_current['stage_id']), $qa_current['stage_id']);
        $my_ranking = $this->redis->zRevRank(get_redis_key('QA.STAGE_QA_RANKING_LIST', $qa_current['stage_id']), $user_id);

        if (false !== $my_ranking) {
            $data = array(
                'total_qa'       => $total_qa,
                'total_qa_score' => $total_qa_score,
                'total_user'     => $total_user,
                'my_ranking'     => $my_ranking + 1
            );
            $data = array_merge($data, $answer_data);
            $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '未参与本期答题'), $this->format);
        }
    }

    /**
     * 获取已结束的每期分组列表
     */
    public function getQaUsedStageGroup()
    {
        $qa_used_stage_group = $this->redis->hGetAll(get_redis_key('QA.QA_USED_STAGE_GROUP'));
        if (!$qa_used_stage_group) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '节目未开始'), $this->format);
        }

        $data = array();
        $is_ranking = I('is_ranking', 0);
        foreach ($qa_used_stage_group as $stage_id => $group) {
            $stage_lucky_key = $is_ranking ? get_redis_key('QA.STAGE_QA_RANKING_LIST', $stage_id) : get_redis_key('QA.STAGE_QA_LUCKY_USER', $stage_id);
            if ($this->redis->zCard($stage_lucky_key)) {
                $stage_info = $this->redis->hGet(get_redis_key('QA.QA_STAGE_INFO'), $stage_id);
                $stage_info = json_decode($stage_info, true);
                $data[$stage_id]['stage_info'] = $stage_info;
                if (strtoupper($stage_info['stage_remark']) === 'COLUMN_END') {
                    $total_lucky_key = $is_ranking ? get_redis_key('QA.TOTAL_QA_RANKING_LIST') : get_redis_key('QA.TOTAL_QA_LUCKY_USER', $stage_info['column_id']);
                    if ($this->redis->zCard($total_lucky_key)) {
                        $data[$stage_info['column_id']] = 'COLUMN_END';
                    }
                }
                $group_list = json_decode($group, true);
                foreach ($group_list as $key => $group_id) {
                    $group_info = $this->redis->hGet(get_redis_key('QA.QA_GROUP_INFO'), $group_id);
                    $group_info = json_decode($group_info, true);
                    $data[$stage_id]['group_info'][] = $group_info;
                }
            }
        }
        $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
    }

    /**
     * 获取分组排行（客户端）
     */
    public function getQaGroupRankingList()
    {
        $group_id = I('group_id', false);
        $limit = I('limit', 100, 'intval');
        $limit = $limit > 0 ? $limit - 1 : 0;

        if (!$group_id) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：group_id'), $this->format);
        }

        $group_ranking_list = $this->redis->zRevRange(get_redis_key('QA.GROUP_QA_RANKING_LIST', $group_id), 0, $limit, true);
        if (!$group_ranking_list) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '当前分组未生成可用排行'), $this->format);
        }
        $i = 1;
        foreach ($group_ranking_list as $key => $value) {
            $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
            $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
            $user_info['user_ranking'] = $i++;
            $data[] = $user_info;
        }
        $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
    }

    /**
     * 获取分期排行
     */
    public function getQaStageRankingList()
    {
        $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
        if ($qa_current) {
            $qa_current = json_decode($qa_current, true);
            $stage_id = $qa_current['stage_id'];
            $limit = I('limit', 100, 'intval');
            $limit = $limit > 0 ? $limit - 1 : 0;
            $stage_ranking_list = $this->redis->zRevRange(get_redis_key('QA.STAGE_QA_RANKING_LIST', $stage_id), 0, $limit, true);
            if ($stage_ranking_list) {
                $i = 1;
                foreach ($stage_ranking_list as $key => $value) {
                    $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                    $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                    $user_info['user_ranking'] = $i++;
                    $data[] = $user_info;
                }
                $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
            } else {
                $this->ajaxReturn(array('code' => 0, 'msg' => '当前期未生成可用排行'), $this->format);
            }
        } else {
            $this->ajaxReturn(array('code' => -1, 'msg' => '答题未开启'), $this->format);
        }
    }

    /**
     * 获取总排行
     */
    public function getQaTotalRankingList()
    {
        $user_id = I('user_id', false);
        $limit = I('limit', 100, 'intval');
        $limit = $limit > 0 ? $limit - 1 : 0;
        $ranking_list = $this->redis->zRevRange(get_redis_key('QA.TOTAL_QA_RANKING_LIST'), 0, $limit, true);
        if ($ranking_list) {
            $i = 1;
            foreach ($ranking_list as $key => $value) {
                $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                $user_info['user_ranking'] = $i++;
                $user_score = $this->redis->hGet(get_redis_key('QA.TOTAL_QA_ANSWER_LOG'), $key);
                $user_score = $user_score ? json_decode($user_score, true) : null;
                $user_info['user_score'] = $user_score;
                $ranking_data[] = $user_info;
            }
            $my_ranking = $this->redis->zRevRank(get_redis_key('QA.TOTAL_QA_RANKING_LIST'), $user_id);
            $my_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $user_id);
            $my_data = $my_info ? json_decode($my_info, true) : array('user_id' => $user_id);
            $my_data['my_ranking'] = $my_ranking !== false ? $my_ranking + 1 : false;
            $my_score = $this->redis->hGet(get_redis_key('QA.TOTAL_QA_ANSWER_LOG'), $user_id);
            $my_score = $my_score ? json_decode($my_score, true) : null;
            $my_data['my_score'] = $my_score;
            $data = array('ranking_list' => $ranking_data, 'user_ranking' => $my_data);
            $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '答题未开启'), $this->format);
        }
    }

    /**
     * 获取每轮中奖名单
     */
    public function getQaGroupLuckyList()
    {
        $group_id = I('group_id', false);
        $limit = I('limit', 100, 'intval');
        $limit = $limit > 0 ? $limit - 1 : 0;
        $is_ranking = I('is_ranking', 0);
        if (!$group_id) {
            $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
            if ($qa_current) {
                $qa_current = json_decode($qa_current, true);
                $group_id = $qa_current['group_id'];
            }
        }
        if (!$group_id) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '活动未开始'), $this->format);
        }

        if ($is_ranking) {
            $group_ranking_list = $this->redis->zRevRange(get_redis_key('QA.GROUP_QA_RANKING_LIST', $group_id), 0, $limit, true);
        } else {
            $group_ranking_list = $this->redis->zRange(get_redis_key('QA.GROUP_QA_LUCKY_USER', $group_id), 0, $limit, true);
        }

        if ($group_ranking_list) {
            $i = 1;
            foreach ($group_ranking_list as $key => $value) {
                $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                $user_info['user_ranking'] = $i++;
                $data[] = $user_info;
            }
        }

        if ($data) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '当前组未生成中奖名单'), $this->format);
        }
    }

    /**
     * 获取每期中奖名单
     */
    public function getQaStageLuckyList()
    {
        $stage_id = I('stage_id', false);
        $limit = I('limit', 100, 'intval');
        $limit = $limit > 0 ? $limit - 1 : 0;
        $is_ranking = I('is_ranking', 0);
        if (!$stage_id) {
            $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
            if ($qa_current) {
                $qa_current = json_decode($qa_current, true);
                $stage_id = $qa_current['stage_id'];
            }
        }
        if (!$stage_id) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '活动未开始'), $this->format);
        }

        if ($is_ranking) {
            $stage_ranking_list = $this->redis->zRevRange(get_redis_key('QA.STAGE_QA_RANKING_LIST', $stage_id), 0, $limit, true);
        } else {
            $stage_ranking_list = $this->redis->zRange(get_redis_key('QA.STAGE_QA_LUCKY_USER', $stage_id), 0, $limit, true);
        }

        if ($stage_ranking_list) {
            $i = 1;
            foreach ($stage_ranking_list as $key => $value) {
                $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                $user_info['user_ranking'] = $i++;
                $data[] = $user_info;
            }
        }

        if ($data) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '当前期未生成中奖名单'), $this->format);
        }
    }

    /**
     * 获取总中奖名单
     */
    public function getQaTotalLuckyList()
    {
        $column_id = I('column_id', false);
        $limit = I('limit', 100, 'intval');
        $limit = $limit > 0 ? $limit - 1 : 0;
        $is_ranking = I('is_ranking', 0);

        if (!$column_id) {
            $qa_current = $this->redis->get(get_redis_key('QA.QA_CURRENT'));
            if ($qa_current) {
                $qa_current = json_decode($qa_current, true);
                $column_id = $qa_current['column_id'];
            }
        }
        if (!$column_id) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '活动未开始'), $this->format);
        }

        if ($is_ranking) {
            $total_ranking_list = $this->redis->zRevRange(get_redis_key('QA.TOTAL_QA_RANKING_LIST'), 0, $limit, true);
        } else {
            $total_ranking_list = $this->redis->zRange(get_redis_key('QA.TOTAL_QA_LUCKY_USER', $column_id), 0, $limit, true);
        }

        if ($total_ranking_list) {
            $i = 1;
            foreach ($total_ranking_list as $key => $value) {
                $user_info = $this->redis->hGet(get_redis_key('QA.QA_USER_INFO'), $key);
                $user_info = $user_info ? json_decode($user_info, true) : array('user_id' => $key);
                $user_info['user_ranking'] = $i++;
                $data[] = $user_info;
            }
        }

        if ($data) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '获取成功', 'data' => $data), $this->format);
        } else {
            $this->ajaxReturn(array('code' => 0, 'msg' => '未生成总中奖名单'), $this->format);
        }
    }

    //领取奖品
    public function getUserLuckyPrize()
    {
        $user_id = I('user_id', false);
        $user_token = I('user_token', false);
        $is_ranking = I('is_ranking', 0);
        $lucky_type = I('lucky_type', false);
        $lucky_type_id = I('lucky_type_id', false);
        if (!$user_id) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：user_id'), $this->format);
        }
        if (!$lucky_type) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：lucky_type'), $this->format);
        }
        if (!$lucky_type_id) {
            $this->ajaxReturn(array('code' => -1, 'msg' => '缺少有效参数：lucky_type_id'), $this->format);
        }

        //验证用户ID
        if (!$this->checkAppUserId($user_token)) {
            $this->ajaxReturn(array('code' => -2, 'msg' => '非法用户'), $this->format);
        }

        if ($is_ranking) {
            if ($lucky_type == 1) {
                $user = $this->redis->zScore(get_redis_key('QA.GROUP_QA_RANKING_LIST', $lucky_type_id), $user_id);
            } else if ($lucky_type == 2) {
                $user = $this->redis->zScore(get_redis_key('QA.STAGE_QA_RANKING_LIST', $lucky_type_id), $user_id);
            } else if ($lucky_type == 3) {
                $user = $this->redis->zScore(get_redis_key('QA.TOTAL_QA_RANKING_LIST', $lucky_type_id), $user_id);
            }
        } else {
            if ($lucky_type == 1) {
                $user = $this->redis->zRank(get_redis_key('QA.GROUP_QA_LUCKY_USER', $lucky_type_id), $user_id);
                $user_get_prize_key = get_redis_key('QA.QA_LUCKY_USER_GET_PRIZE', array('group_id' => $lucky_type_id));
                $lucky_prize_key = get_redis_key('QA.QA_LUCKY_PRIZE_QUEUE', array('group_id' => $lucky_type_id, 'grade_id' => 1));
            } else if ($lucky_type == 2) {
                $user = $this->redis->zRank(get_redis_key('QA.STAGE_QA_LUCKY_USER', $lucky_type_id), $user_id);
                $user_get_prize_key = get_redis_key('QA.QA_LUCKY_USER_GET_PRIZE', array('stage_id' => $lucky_type_id));
                $lucky_prize_key = get_redis_key('QA.QA_LUCKY_PRIZE_QUEUE', array('stage_id' => $lucky_type_id, 'grade_id' => 1));
            } else if ($lucky_type == 3) {
                $user = $this->redis->zRank(get_redis_key('QA.TOTAL_QA_LUCKY_USER', $lucky_type_id), $user_id);
                $user_get_prize_key = get_redis_key('QA.QA_LUCKY_USER_GET_PRIZE', array('column_id' => $lucky_type_id));
                $lucky_prize_key = get_redis_key('QA.QA_LUCKY_PRIZE_QUEUE', array('column_id' => $lucky_type_id, 'grade_id' => 1));
            }
        }

        if (false === $user) {
            $this->ajaxReturn(array('code' => 0, 'msg' => '未中奖'), $this->format);
        }

        $user_get_prize_flag = $this->redis->hGet($user_get_prize_key, $user_id);
        if ($user_get_prize_flag) {
            $this->ajaxReturn(array('code' => 1, 'msg' => '已领取过奖品', 'data' => json_decode($user_get_prize_flag, true)), $this->format);
        }

        if ($this->redis->lLen($lucky_prize_key)) {
            $lucky_prize = $this->redis->lPop($lucky_prize_key);
            $this->redis->hSet($user_get_prize_key, $user_id, $lucky_prize);
            $lucky_prize = json_decode($lucky_prize, true);
            $lucky_prize_log = array('user_id' => $user_id, 'user_lucky_type' => $lucky_type, 'type_id' => $lucky_type_id, 'user_lucky' => $lucky_prize['lucky_prize_number']);
            $this->redis->rPush(get_redis_key('QA.QA_LUCKY_USER_GET_PRIZE_QUEUE'), json_encode($lucky_prize_log));
            $this->ajaxReturn(array('code' => 2, 'msg' => '已中奖', 'data' => $lucky_prize), $this->format);
        } else {
            $this->ajaxReturn(array('code' => -3, 'msg' => '暂无奖品'), $this->format);
        }
    }

    //获取参与答题人数
    private function getQaUserJoinCount($key, $stage_id)
    {
        $count = $this->redis->zCard($key);
        $base_count = $this->redis->hGet(get_redis_key('QA.STAGE_USER_JOIN_BASE'), $stage_id);
        $base_count = $base_count && is_numeric($base_count) && is_int($base_count / 1) && $base_count >= 0 ? $base_count : 0;

        return $count + $base_count;
    }

    /**
     * 验证用户ID是否合法
     */
    private function checkAppUserId($user_token)
    {
        $is_check_user = $this->redis->get(get_redis_key('QA.QA_CHECK_APP_USER_ID'));

        if ($is_check_user && strtolower($is_check_user) == 'true') {
            if ($user_token) {
                $check_url = C('CHECK_CCTV_USER_ID_URL');
                $param = array('usertoken' => $user_token);
                $check_res = http($check_url, $param, 'GET', array("Content-type: text/html; charset=utf-8"));
                $check_res = json_decode($check_res, true);

                return $check_res['succeed'] == 1 ? true : false;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    /**
     * 获取当前时间+偏移量
     */
    private function getNowTime()
    {
        $push_offset = $this->redis->get(get_redis_key('QA.PUSH_OFFSET'));
        $now = $push_offset && is_numeric($push_offset) && is_int($push_offset / 1) ? time() + $push_offset : time();

        return $now;
    }

    /**
     * 接口检测
     */
    public function checkApi()
    {
        $this->ajaxReturn(array('status' => 1, 'msg' => '检测成功'), $this->format);
    }
}